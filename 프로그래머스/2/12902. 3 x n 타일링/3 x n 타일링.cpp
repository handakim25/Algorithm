#include <string>
#include <vector>
#include <iostream>

// 경우의 수를 나눌 때 반드시 짝수개의 경우의 수로 주어진다.
// 배치는 4개를 기준으로 나뉠 수 있다.
// f(n) = f(n-2) * 3 + f(n - 2) + 2
// f(2) = 3
// f(0) = 0
// f(6)라면 f(4)을 기준으로 나머지 3개를 만들어서 붙일 수 있고, f(2)를 기준으로 새거를 만들면 된다.

// 점화식이 잘못되었기 때문에 정답이 나오지 않는다.
// 이러한 경우 반례를 찾아서 해결해야 한다.
// f(4)의 경우 정답이므로 그 다음으로 작은 수인 f(6)에 대해서 반례를 찾는다.
// 반례를 생각해보니까 아예 큰 틀에 대해서 감싸듯이 구하게 되면 2개를 더 구할 수 있다.
// 이를 확장해서 생각해보면 f(8) 기준에서 f(2)에서 감싸듯한 모양을 더하게 할 수 있다.
// 이를 생각해보면 점화식은 다음과 같다.
// f(n) = f(n - 2) * 3 + f(n - 4) * 2 + f(n - 6) * 2 + ... f(0) * 2;

using namespace std;

int solution(int n) {
    vector<long long> dp(n + 1, 0);
    dp[0] = 1;
    dp[2] = 3;
    
    for(int i = 4; i <= n; i += 2) {
        dp[i] = (dp[i - 2] * 3) % 1000000007;
        for(int j = i - 4; j >= 0; j -= 2) {
            dp[i] = (dp[i] + (dp[j] * 2) % 1000000007) % 1000000007;
        }
    }
    
    return dp[n];
}